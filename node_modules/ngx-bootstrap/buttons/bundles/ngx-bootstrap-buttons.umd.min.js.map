{"version":3,"sources":["ng://ngx-bootstrap/buttons/button-checkbox.directive.ts","ng://ngx-bootstrap/buttons/button-radio-group.directive.ts","ng://ngx-bootstrap/buttons/button-radio.directive.ts","ng://ngx-bootstrap/buttons/buttons.module.ts"],"names":["CHECKBOX_CONTROL_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","ButtonCheckboxDirective","multi","Function","prototype","onClick","this","isDisabled","toggle","state","onChange","value","ngOnInit","trueValue","Object","defineProperty","btnCheckboxTrue","btnCheckboxFalse","falseValue","writeValue","setDisabledState","registerOnChange","fn","registerOnTouched","onTouched","Directive","args","selector","providers","Input","HostBinding","type","HostListener","RADIO_CONTROL_VALUE_ACCESSOR","ButtonRadioGroupDirective","el","cdr","_value","markForCheck","ElementRef","ChangeDetectorRef","ButtonRadioDirective","group","renderer","_disabled","disabled","btnRadio","nativeElement","attributes","uncheckable","undefined","_onChange","onBlur","setAttribute","removeAttribute","decorators","Optional","Renderer2","ButtonsModule","forRoot","ngModule","NgModule","declarations","exports"],"mappings":"4XAaA,IAAaA,EAAuC,CAClDC,QAASC,EAAAA,kBACTC,YAAaC,EAAAA,WAAW,WAAM,OAAAC,IAC9BC,OAAO,mDAYyB,yBAEC,cAIzB,gBAKkBC,SAASC,yBACRD,SAASC,iBAIpCH,EAAAG,UAAAC,mBACMC,KAAKC,aAITD,KAAKE,QAAQF,KAAKG,OAClBH,KAAKI,SAASJ,KAAKK,SAGrBV,EAAAG,UAAAQ,SAAA,WACEN,KAAKE,OAAOF,KAAKO,YAAcP,KAAKK,QAGtCG,OAAAC,eAAcd,EAAAG,UAAA,YAAS,KAAvB,WACE,MAAuC,oBAAzBE,KAAKU,iBACfV,KAAKU,iDAIXF,OAAAC,eAAcd,EAAAG,UAAA,aAAU,KAAxB,WACE,MAAwC,oBAA1BE,KAAKW,kBACfX,KAAKW,kDAIXhB,EAAAG,UAAAI,OAAA,SAAOC,GACLH,KAAKG,MAAQA,EACbH,KAAKK,MAAQL,KAAKG,MAAQH,KAAKO,UAAYP,KAAKY,YAKlDjB,EAAAG,UAAAe,WAAA,SAAWR,GACTL,KAAKG,MAAQH,KAAKO,YAAcF,EAChCL,KAAKK,MAAQA,EAAQL,KAAKO,UAAYP,KAAKY,YAG7CjB,EAAAG,UAAAgB,iBAAA,SAAiBb,GACfD,KAAKC,WAAaA,GAGpBN,EAAAG,UAAAiB,iBAAA,SAAiBC,GACfhB,KAAKI,SAAWY,GAGlBrB,EAAAG,UAAAmB,kBAAA,SAAkBD,GAChBhB,KAAKkB,UAAYF,uBApEpBG,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,gBACVC,UAAW,CAAChC,gDAIXiC,EAAAA,gCAEAA,EAAAA,qBAEAC,EAAAA,YAAWJ,KAAA,CAAC,iBAAc,CAAAK,KAC1BD,EAAAA,YAAWJ,KAAA,CAAC,sCAUZM,EAAAA,aAAYN,KAAA,CAAC,iBCvCHO,EAAoC,CAC/CpC,QAASC,EAAAA,kBACTC,YAAaC,EAAAA,WAAW,WAAM,OAAAkC,IAC9BhC,OAAO,gBAwBP,SAAAgC,EAAoBC,EAAwBC,GAAxB9B,KAAA6B,GAAAA,EAAwB7B,KAAA8B,IAAAA,gBAZ5BjC,SAASC,yBACRD,SAASC,iBAE1BU,OAAAC,eAAImB,EAAA9B,UAAA,QAAK,KAAT,WACE,OAAOE,KAAK+B,YAEd,SAAU1B,GACRL,KAAK+B,OAAS1B,mCAOhBuB,EAAA9B,UAAAe,WAAA,SAAWR,GACTL,KAAK+B,OAAS1B,EACdL,KAAK8B,IAAIE,gBAGXJ,EAAA9B,UAAAiB,iBAAA,SAAiBC,GACfhB,KAAKI,SAAWY,GAGlBY,EAAA9B,UAAAmB,kBAAA,SAAkBD,GAChBhB,KAAKkB,UAAYF,uBA7BpBG,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,kBACVC,UAAW,CAACK,gDAfyBM,EAAAA,kBAA9BC,EAAAA,0BCOIP,EAAoC,CAC/CpC,QAASC,EAAAA,kBACTC,YAAaC,EAAAA,WAAW,WAAM,OAAAyC,IAC9BvC,OAAO,gBAkDP,SAAAuC,EACUN,EACAC,EACYM,EACZC,GAHArC,KAAA6B,GAAAA,EACA7B,KAAA8B,IAAAA,EACY9B,KAAAoC,MAAAA,EACZpC,KAAAqC,SAAAA,gBA1CMxC,SAASC,yBACRD,SAASC,uCASbqC,EAAArC,UAAA,QAAK,gBAChB,OAAOE,KAAKoC,MAAQpC,KAAKoC,MAAM/B,MAAQL,KAAK+B,YAG9C,SAAU1B,GACJL,KAAKoC,MACPpC,KAAKoC,MAAM/B,MAAQA,EAIrBL,KAAK+B,OAAS1B,yDAGH8B,EAAArC,UAAA,WAAQ,gBACnB,OAAOE,KAAKsC,eAGd,SAAaC,GACXvC,KAAKsC,UAAYC,EACjBvC,KAAKc,iBAAiByB,0DAKpBJ,EAAArC,UAAA,WAAQ,gBACV,OAAOE,KAAKwC,WAAaxC,KAAKK,uCAWhC8B,EAAArC,UAAAC,mBACMC,KAAK6B,GAAGY,cAAcC,WAAWH,WAAavC,KAAK2C,aAAe3C,KAAKwC,WAAaxC,KAAKK,QAI7FL,KAAKK,MAAQL,KAAK2C,aAAe3C,KAAKwC,WAAaxC,KAAKK,MAAQuC,UAAY5C,KAAKwC,SACjFxC,KAAK6C,UAAU7C,KAAKK,SAGtB8B,EAAArC,UAAAQ,SAAA,WACEN,KAAK2C,YAA0C,oBAArB3C,KAAK2C,aAGjCR,EAAArC,UAAAgD,OAAA,WACE9C,KAAKkB,aAGPiB,EAAArC,UAAA+C,UAAA,SAAUxC,GACR,GAAIL,KAAKoC,MAIP,OAHApC,KAAKoC,MAAMlB,iBACXlB,KAAKoC,MAAMhC,SAASC,GAItBL,KAAKkB,YACLlB,KAAKI,SAASC,IAKhB8B,EAAArC,UAAAe,WAAA,SAAWR,GACTL,KAAKK,MAAQA,EACbL,KAAK8B,IAAIE,gBAGXG,EAAArC,UAAAiB,iBAAA,SAAiBC,GACfhB,KAAKI,SAAWY,GAGlBmB,EAAArC,UAAAmB,kBAAA,SAAkBD,GAChBhB,KAAKkB,UAAYF,GAGnBmB,EAAArC,UAAAgB,iBAAA,SAAiByB,GACXA,EACFvC,KAAKqC,SAASU,aAAa/C,KAAK6B,GAAGY,cAAe,WAAY,YAIhEzC,KAAKqC,SAASW,gBAAgBhD,KAAK6B,GAAGY,cAAe,iCApGxDtB,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,aACVC,UAAW,CAACK,gDAlBkBM,EAAAA,kBAA9BC,EAAAA,yBAION,EAAyBqB,WAAA,CAAA,CAAAxB,KA0D7ByB,EAAAA,kBA7DOC,EAAAA,+CA0BT5B,EAAAA,2BAEAA,EAAAA,qBAEAA,EAAAA,wBAaAA,EAAAA,wBASAC,EAAAA,YAAWJ,KAAA,CAAC,iBAAc,CAAAK,KAC1BD,EAAAA,YAAWJ,KAAA,CAAC,sCAYZM,EAAAA,aAAYN,KAAA,CAAC,iBCpEhBgC,EAAA,gCAWSA,EAAAC,QAAP,WACE,MAAO,CAAEC,SAAUF,EAAe9B,UAAW,yBANhDiC,EAAAA,SAAQnC,KAAA,CAAC,CACRoC,aAAc,CAAC7D,EAAyBwC,EAAsBP,GAC9D6B,QAAS,CAAC9D,EAAyBwC,EAAsBP,SAR3D","sourcesContent":["// tslint:disable:no-use-before-declare\nimport {\n  Directive,\n  HostBinding,\n  HostListener,\n  Input,\n  OnInit,\n  forwardRef\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\n// TODO: config: activeClass - Class to apply to the checked buttons\n\nexport const CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => ButtonCheckboxDirective),\n  multi: true\n};\n\n/**\n * Add checkbox functionality to any element\n */\n@Directive({\n  selector: '[btnCheckbox]',\n  providers: [CHECKBOX_CONTROL_VALUE_ACCESSOR]\n})\nexport class ButtonCheckboxDirective implements ControlValueAccessor, OnInit {\n  /** Truthy value, will be set to ngModel */\n  @Input() btnCheckboxTrue: any = true;\n  /** Falsy value, will be set to ngModel */\n  @Input() btnCheckboxFalse: any = false;\n\n  @HostBinding('class.active')\n  @HostBinding('attr.aria-pressed')\n  state = false;\n\n  protected value: any;\n  protected isDisabled: boolean;\n\n  protected onChange: any = Function.prototype;\n  protected onTouched: any = Function.prototype;\n\n  // view -> model\n  @HostListener('click')\n  onClick(): void {\n    if (this.isDisabled) {\n      return;\n    }\n\n    this.toggle(!this.state);\n    this.onChange(this.value);\n  }\n\n  ngOnInit(): any {\n    this.toggle(this.trueValue === this.value);\n  }\n\n  protected get trueValue(): boolean {\n    return typeof this.btnCheckboxTrue !== 'undefined'\n      ? this.btnCheckboxTrue\n      : true;\n  }\n\n  protected get falseValue(): boolean {\n    return typeof this.btnCheckboxFalse !== 'undefined'\n      ? this.btnCheckboxFalse\n      : false;\n  }\n\n  toggle(state: boolean): void {\n    this.state = state;\n    this.value = this.state ? this.trueValue : this.falseValue;\n  }\n\n  // ControlValueAccessor\n  // model -> view\n  writeValue(value: any): void {\n    this.state = this.trueValue === value;\n    this.value = value ? this.trueValue : this.falseValue;\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    this.isDisabled = isDisabled;\n  }\n\n  registerOnChange(fn: (_: any) => {}): void {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: () => {}): void {\n    this.onTouched = fn;\n  }\n}\n","// tslint:disable:no-use-before-declare\nimport { ChangeDetectorRef, Directive, ElementRef, forwardRef } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nexport const RADIO_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => ButtonRadioGroupDirective),\n  multi: true\n};\n\n/**\n * A group of radio buttons.\n * A value of a selected button is bound to a variable specified via ngModel.\n */\n@Directive({\n  selector: '[btnRadioGroup]',\n  providers: [RADIO_CONTROL_VALUE_ACCESSOR]\n})\nexport class ButtonRadioGroupDirective implements ControlValueAccessor {\n  onChange: any = Function.prototype;\n  onTouched: any = Function.prototype;\n\n  get value(): any {\n    return this._value;\n  }\n  set value(value: any) {\n    this._value = value;\n  }\n\n  private _value: any;\n\n  constructor(private el: ElementRef, private cdr: ChangeDetectorRef) {}\n\n  writeValue(value: any): void {\n    this._value = value;\n    this.cdr.markForCheck();\n  }\n\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n}\n","// tslint:disable:no-use-before-declare\nimport {\n  ChangeDetectorRef, Directive, ElementRef, forwardRef, HostBinding, HostListener, Input, OnInit,\n  Optional, Renderer2\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { ButtonRadioGroupDirective } from './button-radio-group.directive';\n\nexport const RADIO_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => ButtonRadioDirective),\n  multi: true\n};\n\n/**\n * Create radio buttons or groups of buttons.\n * A value of a selected button is bound to a variable specified via ngModel.\n */\n@Directive({\n  selector: '[btnRadio]',\n  providers: [RADIO_CONTROL_VALUE_ACCESSOR]\n})\nexport class ButtonRadioDirective implements ControlValueAccessor, OnInit {\n  onChange: any = Function.prototype;\n  onTouched: any = Function.prototype;\n  private _value: any;\n  private _disabled: boolean;\n\n  /** Radio button value, will be set to `ngModel` */\n  @Input() btnRadio: any;\n  /** If `true` â radio button can be unchecked */\n  @Input() uncheckable: boolean;\n  /** Current value of radio component or group */\n  @Input() get value(): any {\n    return this.group ? this.group.value : this._value;\n  }\n\n  set value(value: any) {\n    if (this.group) {\n      this.group.value = value;\n\n      return;\n    }\n    this._value = value;\n  }\n  /** If `true` â radio button is disabled */\n  @Input() get disabled(): boolean {\n    return this._disabled;\n  }\n\n  set disabled(disabled: boolean) {\n    this._disabled = disabled;\n    this.setDisabledState(disabled);\n  }\n\n  @HostBinding('class.active')\n  @HostBinding('attr.aria-pressed')\n  get isActive(): boolean {\n    return this.btnRadio === this.value;\n  }\n\n  constructor(\n    private el: ElementRef,\n    private cdr: ChangeDetectorRef,\n    @Optional() private group: ButtonRadioGroupDirective,\n    private renderer: Renderer2\n  ) {}\n\n  @HostListener('click')\n  onClick(): void {\n    if (this.el.nativeElement.attributes.disabled || !this.uncheckable && this.btnRadio === this.value) {\n      return;\n    }\n\n    this.value = this.uncheckable && this.btnRadio === this.value ? undefined : this.btnRadio;\n    this._onChange(this.value);\n  }\n\n  ngOnInit(): void {\n    this.uncheckable = typeof this.uncheckable !== 'undefined';\n  }\n\n  onBlur(): void {\n    this.onTouched();\n  }\n\n  _onChange(value: any): void {\n    if (this.group) {\n      this.group.onTouched();\n      this.group.onChange(value);\n\n      return;\n    }\n    this.onTouched();\n    this.onChange(value);\n  }\n\n  // ControlValueAccessor\n  // model -> view\n  writeValue(value: any): void {\n    this.value = value;\n    this.cdr.markForCheck();\n  }\n\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  setDisabledState(disabled: boolean): void {\n    if (disabled) {\n      this.renderer.setAttribute(this.el.nativeElement, 'disabled', 'disabled');\n\n      return;\n    }\n    this.renderer.removeAttribute(this.el.nativeElement, 'disabled');\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\n\nimport { ButtonCheckboxDirective } from './button-checkbox.directive';\nimport { ButtonRadioDirective } from './button-radio.directive';\nimport { ButtonRadioGroupDirective } from './button-radio-group.directive';\n\n@NgModule({\n  declarations: [ButtonCheckboxDirective, ButtonRadioDirective, ButtonRadioGroupDirective],\n  exports: [ButtonCheckboxDirective, ButtonRadioDirective, ButtonRadioGroupDirective]\n})\nexport class ButtonsModule {\n  static forRoot(): ModuleWithProviders {\n    return { ngModule: ButtonsModule, providers: [] };\n  }\n}\n"]}